#!/usr/bin/env tclsh8.6
# -*- mode: tcl; indent-tabs-mode: nil; tab-width: 4; -*-

package require appc::env
package require appc::native
package require appc::build
package require appc::import
package require appc::repo
package require appc::run
package require appc::zfs

package require debug
package require defer

debug define appc
debug on appc 1 stderr

set options [appc::parse_options $argv]
debug.appc "Options: $options"

set command [dict get $options command]
set args [dict get $options args]

if {[dict exists $args help]} {
    puts stderr [dict get $args help]
    exit 0
}

set pool [appc::env::get_pool]
if {![appc::zfs::is_mounted $pool]} {
    puts stderr "ZFS pool '$pool' is not mounted.  Attempting to mount now"
    appc::zfs::mount $pool
}

set run_done_flag [expr false]
proc run_container_coro {options} {
    global run_done_flag

    set interactive [dict get $options args interactive]
    
    #Initialization yield
    yield
    
    if {$interactive} {
        set chan_dict [dict create stdin stdin stdout stdout stderr stderr]
    } else {
        set devnull [open /dev/null w]
        set chan_dict [dict create stdin $devnull stdout $devnull stderr $devnull]
        defer::with [list devnull] {
            close $devnull
        }
    }

    #Setup and yieldto the run coroutine.  It will callback this coroutine after exiting
    coroutine runcoro appc::run::run_command $chan_dict [dict get $options args] [info coroutine]
    yieldto runcoro

    set run_done_flag [expr true]
}

proc handle_repo_cmd {cmd args_dict} {

    debug.appc "repo args: $args_dict"
    set image [dict get $args_dict image]

    set tag [dict get $args_dict tag]
    if {$tag eq {}} {
        set tag {latest}
    }

    set repo [appc::repo::repo_factory [appc::env::get_repo_url]]
    defer::with [list repo] {
        $repo destroy
    }

    set downloaddir [appc::env::image_download_dir]
    
    switch -exact $cmd {

        publish {
            #Publish needs to package the image and publish.  Basically
            #a package and put.
            set package_file [appc::export::package $image $tag]
            $repo put_image $image $tag
        }
        pull {
            #Pulls the command.  Basically a GET and an import.
            $repo pull_image $image $tag $downloaddir
            appc::import::import $image $tag $downloaddir stderr
        }
    }
}

switch -regexp -matchvar parsed_cmd $command {

    build {
        #Building creates the image as a tagged dataset.
        #TODO: currently it doesn't tag the dataset
        appc::build::build_command $args stderr
    }
    run {
        #Create a new container from a tagged dataset.
        set interactive [dict get $args interactive]
        coroutine toplevel_run_coro run_container_coro $options
        after idle toplevel_run_coro
        vwait run_done_flag
    }
    publish|pull {
        debug.appc "push pull args: $args"
        handle_repo_cmd $parsed_cmd $args
    }
    default {
        puts stderr "Unknown command: $command"
    }
}

#!/usr/bin/env tclsh8.6
# -*- mode: tcl; indent-tabs-mode: nil; tab-width: 4; -*-

package require appc::env
package require appc::native
package require appc::build
package require appc::publish
package require appc::pull
package require appc::run
package require appc::zfs

package require debug
package require defer

debug define appc
debug on appc 0 stderr

set options [appc::parse_options $argv]
debug.appc "Options: $options"
set command [dict get $options command]
set args [dict get $options args]

if {[dict exists $args help]} {
    puts stderr [dict get $args help]
    exit 0
}

set pool [appc::env::get_pool]
if {![appc::zfs::is_mounted $pool]} {
    puts stderr "ZFS pool '$pool' is not mounted.  Attempting to mount now"
    appc::zfs::mount $pool
}

set run_done_flag [expr false]
proc run_container_coro {options} {
    global run_done_flag

    set interactive [dict get $options args interactive]
    
    #Initialization yield
    yield
    
    if {$interactive} {
        set chan_dict [dict create stdin stdin stdout stdout stderr stderr]
    } else {
        set devnull [open /dev/null w]
        set chan_dict [dict create stdin $devnull stdout $devnull stderr $devnull]
        defer::with [list devnull] {
            close $devnull
        }
    }

    #Setup and yieldto the run coroutine.  It will callback this coroutine after exiting
    coroutine runcoro appc::run::run_command $chan_dict [dict get $options args] [info coroutine]
    yieldto runcoro

    set run_done_flag [expr true]
}


#Request tag is something that was used for running commands
# in a daemon.  It's not really needed for single process
# but it hasn't been removed yet.
set request_tag {tag1}
switch -exact $command {

    build {
        appc::build::build_command [dict get $options args] stderr
    }
    run {
        set args [dict get $options args]
        set interactive [dict get $args interactive]
        coroutine toplevel_run_coro run_container_coro $options
        after idle toplevel_run_coro
        vwait run_done_flag
    }
    publish {
        appc::publish::publish_command [dict get $options args]
    }
    pull {
        appc::pull::pull_command [dict get $options args]
    }
    default {
        puts stderr "Unknown command: $command"
    }
}

#!/usr/bin/env tclsh8.6
# -*- mode: tcl; indent-tabs-mode: nil; tab-width: 4; -*-
package require Tcl 8.6
package require TclOO
package require appc::env
package require appc::network
package require appc::pull
package require appc::run
package require debug
package require debug::heartbeat
package require defer
package require dicttool

#NOTES: Quick notes on first features of the daemon
#since i'm in a plane and can't get online.
# The first features we need:
# 1. Pull an image
# 2. Run a pulled image in the background and on a pty
# 2a. Standard out and/or standard err should go
#     to syslog (or some log)
# 2b. We don't yet support executing the command file that is
#     part of the package.  We also don't delete the whitelist
#     files
# 3. Run multiple containers and setup the networking
#    between them.
# 3a. Run the dns server
# 4. Monitor and close containers (cleanup)
# 5. Other features like capsicum and ractl
#
# NOTE: The -h flag is going to be huge for this because it can use
# dns to resolve the hostname of a jail to addresses
#
# NOTE: Name must be part of the jail.  If it isn't provided then use the uid

namespace eval appcd::_ {

    debug define appcd
    debug on appcd 1 stderr


    proc read_msgs_coro {channel clientaddr clientport cb_coro} {
        #Read a message from the channel and yield to the callback coroutine

        yield
        while {true} {
            set msg {}
            gets $channel msg
            if {[fblocked $channel]} {
                debug.appcd "Full msg not available.  Waiting for more data"

                #No message available, setup the callback for when data becomes available
                chan event $channel readable [info coroutine]
                yield
                continue
            } elseif {[eof $channel]} {
                debug.appcd "EOF for channel found (${clientaddr}:${clientport}). Closing connection."

                chan event $channel readable {}
                
                #Yield an empty message which signals the connection has closed.  The
                #receiving coroutine is responsible for deleting this coroutine
                yieldto $cb_coro {}
            } else {
                #Message available.

                #Delete the handle until we are ready for another message
                chan event $channel readable {}

                #Give the msg to the interested coroutine
                yieldto $cb_coro $msg
            }
        }

        return -code error -errorcode {APPCD UNEXPECTED} "Reached the end of message generator"
    }

    
    #For the first iteration, commands will just be line delimited tcl dicts
    # send over localhost.
    proc request_coroutine {channel clientaddr clientport} {

        set msg_generator_name ${channel}_msg_generator
        coroutine $msg_generator_name read_msgs_coro $channel $clientaddr $clientport [info coroutine]
        defer::with [list channel] {
            close $channel
            rename $msg_generator_name {}
        }
        
        fconfigure $channel \
            -encoding {utf-8} \
            -blocking 0 \
            -buffering line \
            -buffersize 2048 \
            -translation crlf

        #Initialization yield
        yield
        
        debug.appcd "Yielding to message generator"
        set msg [yieldto $msg_generator_name]

        #I'm not sure why but for some reason the message is a list
        #of length one containing a string that is the message
        set msg [lindex $msg 0]
        debug.appcd "Message received: $msg"
        if {$msg eq {}} {

            debug.appcd "No more messages available on channel.  Exiting processing coroutine"
            return -code ok
        }

        set command [dict get $msg cli_options command]
        set args [dict get $msg cli_options args]
        switch -exact $command {
            pull {
                appc::pull::pull_command $args $channel
            }
            run {
                set pty [dict get $msg pty]
                set run_coro_name ${channel}.${clientaddr}.{clientport}_run_coro
                coroutine $run_coro_name appc::run::run_command $pty $args [info coroutine]
                yieldto $run_coro_name 
            }
            create-network {
                appc::network::create_network $args
            }
            default {
                debug.appcd "Unknown command $command"
            }
        }
    }
}

proc new_connection {channel clientaddr clientport} {

    debug.appcd "New connection found"
    set coro_name ${channel}.${clientaddr}.${clientport}-request_coro
    coroutine $coro_name appcd::_::request_coroutine $channel $clientaddr $clientport

    #Start the coroutine outside of the context of this proc
    after idle $coro_name
}

#Needed for the heartbeat module
proc every {ms body} {
    eval $body
    variable debug::timer [after $ms [info level 0]]
    return
}

proc bgerror {message} {
    debug.appcd "bgerror: $message"
}

proc init_zpool {} {
    #Init ZFS
    set pool [appc::env::get_pool]
    if {![appc::zfs::is_mounted $pool]} {
        debug.appcd "ZFS pool '$pool' is not mounted.  Attempting to mount now"
        appc::zfs::mount $pool
    }
}

#TODO Unix socket so we can restrict connections based on
#group permissions
socket -server [list new_connection] -myaddr 127.0.0.1 6432
debug::heartbeat [expr 1000 * 60]
vwait _forever_

#!/usr/bin/env tclsh8.6
# -*- mode: tcl; indent-tabs-mode: nil; tab-width: 4; -*-

load libappctcl.so
source build.tcl

namespace eval appc::_ {
    
    proc validate_environment {} {

        variable basejail
	
        if {$basejail eq {}} {

            puts stderr "variable basejail must be set"
            exit 1
        }
	
    }

    proc jail_start {mountpoint command} {

        #TODO, execute in a sub interp so we can see when it exits.  Or do
        #this async so we can catch when it exits and cleanup.
        exec jail -c ip4=inherit allow.mount.devfs=1 mount.devfs=1 path=$mountpoint command=$command >&@ stdout
        puts "Exited jail"
    }

    variable appc_pool {zroot}
    variable appc_dataset "$appc_pool/appc/jails"
}


#appc --empty 1 --basejail zroot/jails/base
#appc build [-f {tclscript}]
#Check if base jail exists if not create from pool and
# pull down tarball and extract
set options [appc::parse_options $argv]

set command [dict get $options command]

switch -exact $command {

    build {
        build_command [dict get $options args]
    }
}
#Notes on appc build
# - We will pull down the "FROM" images into a special jail for building the image
# - We commands will be executed in that jail
# - The jail is created and deleted for each "build" invocation

#initialize basejail to commandline
# set basejail $::appc::_::basejail_snapshot
# set appc_dataset $::appc::_::appc_dataset
# set mountpoint [pwd]/mnt
# set jailname {testjail}
# if {[dict exists $::appc::_::zfs_snapshots $basejail]} {

#     puts stderr "Exists.. cloning"

#     #TODO: Where to mount?  Maybe: ~/.appc/mounts/<jailname>
#     ::appc::_::zfs_clone_snapshot $basejail [join "$appc_dataset $jailname" /] $mountpoint
# }

# ::appc::_::jail_start $mountpoint {/bin/sh}

#TODO: I probably need an appc pool to manage
#if basejail is a snapshot clone it
#if basejail is not a snapshot but exists, snapshot it
#if basejail is not a snapshot and does not exist create it from pool specified
# in first part of dataset path by creating the dataset,
# pulling down base.tar.gz and untar'ing it.


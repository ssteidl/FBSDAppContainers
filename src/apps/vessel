#!/usr/bin/env tclsh8.6
# -*- mode: tcl; indent-tabs-mode: nil; tab-width: 4; -*-

package require vessel::build
package require vessel::env
package require vessel::export
package require vessel::native
package require vessel::import
package require vessel::metadata_db
package require vessel::repo
package require vessel::run
package require vessel::zfs

package require debug
package require defer

package require fileutil

debug define vessel
debug on vessel 1 stderr

set options [vessel::parse_options $argv]

set command [dict get $options command]
set args [dict get $options args]

if {[dict exists $args help]} {
    puts stderr [dict get $args help]
    exit 0
}

set pool [vessel::env::get_pool]
if {![vessel::zfs::is_mounted $pool]} {
    puts stderr "ZFS pool '$pool' is not mounted.  Attempting to mount now"
    if {[catch {vessel::zfs::mount $pool} msg]} {
        puts stderr "Failed to mount pool: ${msg}.  Moving on..."
    }
}

#TODO: Check if proc filesystem is mounted.  If not, mount it

set run_done_flag [expr false]

proc signal_handler {signal active_pid_groups} {

    #TODO: Move this shutdown code to the jail module.  The signal
    # handler should stay here.
    
    puts stderr "apgs: $active_pid_groups"

    proc find_jail_from_pid {pids} {

        # Look through each pid and find the first
        # jail listed in proc filesystem
        #
        # jail id is the last field in the status file for the
        # pid
        
        set jail {}
        foreach p $pids {
            if {$p eq {}} {
                continue
            }
            set data [fileutil::cat "/proc/${p}/status"]
            puts stderr "status: $data"
            set jail_status [lindex $data end]
            puts stderr "jail_status: $jail_status"
            if {$jail_status ne {-} && $jail_status ne {}} {
                set jail $jail_status
                break
            }
        }

        return $jail
    }

    foreach pid_group $active_pid_groups {

        set jail {}
        set main_pid [dict get $pid_group "main_pid"]
        dict for {key pid_list} $pid_group {
            #Find the jail from the main pid or
            # if main_pid has closed, from the active pids

            switch -exact $key {

                "main_pid" {
                    #main_pid isn't a list so we make it one
                    set jail [find_jail_from_pid [list $pid_list]]
                }

                "active_pids" {
                    set jail [find_jail_from_pid $pid_list]
                }
            }

            if {$jail ne {}} {
                break
            }
        }

        if {$jail eq {}} {
            return -code error "Could not find jail in signal handler"
        }

        
        puts stderr "jail for signal: $jail"

            
        #Propagate the signal as follows:
        # 1. If it's sigint, go through the shutdown process.
        #    The thought being that sigint comes from a keyboard and generally will mean, stop jail.
        #
        # 2. If it's an interactive shell, pass through the signal to the main process.  NOTE: Perhaps
        #    we need a way to define the main process in the VesselFile (or signal handler processes).
        #    Then we could search for it by name in the pid status files.
        #    
        # 3. SIGTERM should shutdown the jail (/etc/rc.shutdown, then kill -TERM -1)

        
        #If the main pid is still running, pass the signal to the main pid
        if {$main_pid ne {}} {
            puts stderr "Passing signal to main pid"
            set err [catch {exec -ignorestderr jexec $jail kill "-${signal}" $main_pid}]
            if {$err} {
                puts stderr "Error killing main process in jail: $jail"
            }

            #If it's a sigint and main process is still running, remove the jail.
            switch -exact $signal {
                INT {
                    #Give it 5 seconds to shutdown.
                    #TODO: We could make this configurable via the commandline
                    after 5000 [list apply {{jid} { 
                    
                        puts stderr "Removing jail $jid"
                        exec -ignorestderr jail -r $jid >&@ stderr
                    }} $jail]
                }
            }
        } else {
            #For background jails, sigint is immediate jail -r.  sigterm triggers the
            #shutdown process
            puts stderr "Handling SIG${signal} for background process"
            switch -exact $signal {
                INT {
                    vessel::jail::remove $jail stderr
                }
                TERM {
                    catch {vessel::jail::shutdown $jail stderr}
                    after 2000 [list exec -ignorestderr jail -r $jail >&@ stderr]
                }
                default {
                    vessel::jail::kill $jail "-${signal}" stderr
                }
            }
        }
    }
}

vessel::exec_set_signal_handler [list signal_handler]

#TODO: This belongs in the 'vessel init' command whenever
# we decide to implement that..
proc create_workdir {} {

    set workdir [vessel::env::get_workdir]
    if {![file exists $workdir]} {
        file mkdir $workdir
        file mkdir [file join $workdir local_repo]
        file mkdir [file join $workdir db]
        file mkdir [file join $workdir downloaded_images]
    }
}

proc run_container_coro {options} {
    global run_done_flag

    set interactive [dict get $options args interactive]
    
    #Initialization yield
    yield
    
    if {$interactive} {
        set chan_dict [dict create stdin stdin stdout stdout stderr stderr]
    } else {
        set devnull [open /dev/null w]
        set chan_dict [dict create stdin $devnull stdout stdout stderr stderr]
        defer::with [list devnull] {
            close $devnull
        }
    }

    #Setup and yieldto the run coroutine.  It will callback this coroutine after exiting
    coroutine runcoro vessel::run::run_command $chan_dict [dict get $options args] \
        [info coroutine]
    yieldto runcoro
    set run_done_flag [expr true]
}

proc handle_repo_cmd {cmd args_dict} {

    debug.vessel "repo args: $args_dict"
    set image [dict get $args_dict image]

    set tag [dict get $args_dict tag]
    if {$tag eq {}} {
        set tag {latest}
    }

    set repo [vessel::repo::repo_factory [vessel::env::get_repo_url]]
    defer::with [list repo] {
        $repo destroy
    }

    set downloaddir [vessel::env::image_download_dir]
    
    switch -exact $cmd {

        publish {
            #NOTE: We may want to make export directories something separate
            #from download directories.  For now, we'll keep it separate.
            #
            #vessel publish --tag=local kafka
            set image_file [vessel::export::export_image $image $tag $downloaddir]
            if {![$repo image_exists $image $tag]} {
                $repo put_image $image_file
            }
        }
        pull {
            #Pulls the command.  Basically a GET and an import.
            $repo pull_image $image $tag $downloaddir
            vessel::import::import $image $tag $downloaddir stderr
        }
    }
}

create_workdir

switch -regexp -matchvar parsed_cmd $command {

    build {
        #Building creates the image as a tagged dataset.
        #TODO: currently it doesn't tag the dataset
        vessel::build::build_command $args stderr
    }
    run {
        #Create a new container from a tagged dataset.
        set interactive [dict get $args interactive]
        coroutine toplevel_run_coro run_container_coro $options
        after idle toplevel_run_coro
        vwait run_done_flag
    }
    publish|pull {
        debug.vessel "push pull args: $args"
        handle_repo_cmd $parsed_cmd $args
    }
    image {
        vessel::metadata_db::image_command $args
    }
    export {
        vessel::export::export_command $args
    }
    default {
        puts stderr "Unknown command: $command"
        exit 1
    }

    exit 0
}
